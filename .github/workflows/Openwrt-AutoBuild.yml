#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt-R4S

on: 
  workflow_dispatch:

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPOE_PASSWD: ${{ secrets.PPPOE_PASSWD }}
  SCKEY: ${{ secrets.SCKEY }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: Ubuntu-20.04
    
    name: Build nanopi-r4s
    strategy:
      fail-fast: false
      matrix:
        target: ["${{ github.event.client_payload.target }}"]
        
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: cancel running workflows
      uses: styfle/cancel-workflow-action@main
      if: contains(github.event.action, 'cw')
      with:
        workflow_id: 4439867
        access_token: ${{ github.token }}

    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/devices/common/settings.ini"
        if [ -f "devices/nanopi-r4s/settings.ini" ]; then
          source "${GITHUB_WORKSPACE}/devices/nanopi-r4s/settings.ini"
        fi
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "FREE_UP_DISK=${FREE_UP_DISK}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_COWTRANSFER=${UPLOAD_FIRMWARE_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_WETRANSFER=${UPLOAD_FIRMWARE_TO_WETRANSFER}" >> $GITHUB_ENV

    - name: Trigger Packages Update
      run: |
        gitdate=$(curl -s "https://api.github.com/repos/garypang13/openwrt-packages/actions/runs" | jq -r '.workflow_runs[0].created_at')
        gitdate=$(date -d "$gitdate" +%s)
        now=$(date -d "$(date '+%Y-%m-%d %H:%M:%S')" +%s)
        if [[ $(expr $gitdate + 60) < $now ]]; then
        curl -X POST https://api.github.com/repos/garypang13/openwrt-packages/dispatches \
        -H "Accept: application/vnd.github.everest-preview+json" \
        -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
        --data '{"event_type": "update"}'
        fi

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        ( sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf wget curl swig rsync upx
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"
    
    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%Y')" >> $GITHUB_ENV

    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        if [[ nanopi-r4s =~ (redmi-ac2100|phicomm-k2p|newifi-d2|k2p-32m-usb|XY-C5|xiaomi-r3p) ]]; then
            wget -cO sdk.tar.xz https://downloads.openwrt.org/releases/21.02-SNAPSHOT/targets/ramips/mt7621/openwrt-sdk-21.02-SNAPSHOT-ramips-mt7621_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        elif [[ nanopi-r4s == "x86_64" ]]; then
            wget -cO sdk.tar.xz https://downloads.openwrt.org/releases/21.02-SNAPSHOT/targets/x86/64/openwrt-sdk-21.02-SNAPSHOT-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        elif [[ nanopi-r4s =~ (nanopi-r2s|nanopi-r4s) ]]; then
            wget -cO sdk.tar.xz https://downloads.openwrt.org/releases/21.02-SNAPSHOT/targets/rockchip/armv8/openwrt-sdk-21.02-SNAPSHOT-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        fi
      
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/staging_dir /mnt/openwrt/build_dir/hostpkg openwrt/build_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
        ln -sf /mnt/openwrt/build_dir/hostpkg openwrt/build_dir/hostpkg

    - name: Load && Update feeds
      run: |
        cp -rf devices/common/. openwrt/
        cp -rf devices/nanopi-r4s/. openwrt/
        cd openwrt
        ./scripts/feeds update -a

    - name: Load custom configuration
      run: |
        cp -rf devices openwrt/
        cd openwrt
        chmod +x devices/common/$DIY_SH
        /bin/bash "devices/common/$DIY_SH"
        cp -Rf ./diy/* ./
        if [ -f "devices/nanopi-r4s/$DIY_SH" ]; then
          chmod +x devices/nanopi-r4s/$DIY_SH
          /bin/bash "devices/nanopi-r4s/$DIY_SH"
        fi
        cp -f devices/common/default-settings package/*/*/default-settings/files/uci.defaults
        if [ -f "devices/nanopi-r4s/default-settings" ]; then
          echo >> package/*/*/default-settings/files/uci.defaults
          cat devices/nanopi-r4s/default-settings >> package/*/*/default-settings/files/uci.defaults
        fi
        cp -f devices/common/$CONFIG_FILE .config
        if [ -f "devices/nanopi-r4s/$CONFIG_FILE" ]; then
          echo >> .config
          cat devices/nanopi-r4s/$CONFIG_FILE >> .config
        fi

    - name: Apply patches
      run: |
        cd openwrt
        find "devices/common/patches" -type f ! -path 'devices/common/patches/china_mirrors.patch' -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        if [ -n "$(ls -A "devices/nanopi-r4s/patches" 2>/dev/null)" ]; then
          find "devices/nanopi-r4s/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        fi
        
    - name: Default PPPOE Setting
      if: env.PPPOE_USERNAME && env.PPPOE_PASSWD
      run: |
        sed -i '$i uci set network.wan.username=${{ env.PPPOE_USERNAME }}' openwrt/package/*/*/default-settings/files/uci.defaults
        sed -i '$i uci set network.wan.password=${{ env.PPPOE_PASSWD }}' openwrt/package/*/*/default-settings/files/uci.defaults
        sed -i '$i uci commit network' openwrt/package/*/*/default-settings/files/uci.defaults
              
    - name: SSH connection to Actions
      uses: garypang13/debugger-action@master
      if: contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(($(nproc)+1)) &

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-output name=status::success"
   
    - name: Check space usage
      run: df -hT
   
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR_FOR_ARTIFACT == 'true'
      with:
        name: OpenWrt_bin_nanopi-r4s
        path: openwrt/bin

    - name: Organize files
      id: organize
      run: |
        cd openwrt/bin
        echo ${{ env.date4 }} > version.txt
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        Emoji=("üéâ" "ü§û" "‚ú®" "üéÅ" "üéà" "üéÑ" "üé®" "üíã" "üçì" "üçï" "üçâ" "üíê" "üå¥" "üöÄ" "üõ∏" "üóΩ" "‚õÖ" "üåà" "üî•" "‚õÑ" "üê∂" "üèÖ" "ü¶Ñ" "üê§")
        RANDOM=$$$(date +%s)
        rand=$[$RANDOM % ${#Emoji[@]}]
        echo "EMOJI=${Emoji[$rand]}" >> $GITHUB_ENV
        echo "NOTICE=ËØ∑ÂàÜÈÖç‰∏çÂ∞ë‰∫é800MÁöÑÂ≠òÂÇ®ÂÆπÈáè" >> $GITHUB_ENV

    - name: Upload firmware for release
      uses: softprops/action-gh-release@v1
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date2 }} nanopi-r4s ${{ env.EMOJI }}
        tag_name: ${{ env.date }}_nanopi-r4s
        body_path: release.txt

    - name: Upload firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} nanopi-r4s
        path: ${{ env.FIRMWARE }}
        
    - name: WeChat notification
      continue-on-error: true
      if: env.SCKEY
      run: |
        curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt_${{ env.date3 }}_nanopi-r4sÁºñËØëÂÆåÊàê
